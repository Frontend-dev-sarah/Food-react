{"ast":null,"code":"var _jsxFileName = \"/Users/sarah/Documents/Projects/Food/src/store/MealProvider.js\",\n    _s2 = $RefreshSig$();\n\nimport { useReducer, useEffect, useMemo, useCallback } from \"react\";\nimport { BASE_URL } from \"../common/constant\";\nimport { GET_MEALS_FAIL, GET_MEALS_PENDING, GET_MEALS_SUCCESS, POST_MEAL_FAIL, POST_MEAL_PENDING, POST_MEAL_SUCCESS } from \"./actions\";\nimport { mealListInitialState } from \"./initialState\";\nimport MealContext from \"./mealContext\";\nimport mealReducer from \"./mealReducer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MealProvider = _ref => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  let {\n    children\n  } = _ref;\n  const [state, dispatch] = useReducer(mealReducer, mealListInitialState);\n  const getMealList = useCallback(_s(async () => {\n    _s();\n\n    dispatch({\n      type: GET_MEALS_PENDING\n    });\n\n    try {\n      const response = await fetch(BASE_URL);\n\n      if (!response.ok) {\n        throw Error(\"Somethig goes wrong !\");\n      }\n\n      const data = useMemo(async () => {\n        await response.json();\n      }, [response]);\n      let formatedMealList = [];\n\n      for (const key in data) {\n        formatedMealList.push(data[key]);\n      }\n\n      dispatch({\n        type: GET_MEALS_SUCCESS,\n        payload: formatedMealList\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_MEALS_FAIL,\n        payload: error\n      });\n    }\n  }, \"jwuu1hJIzb+z9O8CErpZ1XdXNoc=\"), []);\n  useEffect(() => {\n    getMealList();\n  }, [getMealList]);\n\n  const postMealItem = async meals => {\n    dispatch({\n      type: POST_MEAL_PENDING\n    });\n\n    try {\n      const response = await fetch(BASE_URL, {\n        method: \"POST\",\n        body: JSON.stringify(meals),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n\n      if (response.ok) {\n        dispatch({\n          type: POST_MEAL_SUCCESS\n        });\n      } else {\n        throw Error(\"Add meal failed !\");\n      }\n\n      return response;\n    } catch (error) {\n      dispatch({\n        type: POST_MEAL_FAIL,\n        payload: error\n      });\n    }\n  };\n\n  const mealContext = {\n    mealList: state.mealList,\n    isLoading: state.isLoading,\n    error: state.error,\n    mealItem: state.mealItem,\n    isPostLoading: state.isPostLoading,\n    errorPost: state.errorPost,\n    getMealList: getMealList,\n    postMealItem: postMealItem\n  };\n  return /*#__PURE__*/_jsxDEV(MealContext.Provider, {\n    value: mealContext,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(MealProvider, \"wrdddd96RIl/lZMnXnHytD23y3I=\");\n\n_c = MealProvider;\nexport default MealProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"MealProvider\");","map":{"version":3,"names":["useReducer","useEffect","useMemo","useCallback","BASE_URL","GET_MEALS_FAIL","GET_MEALS_PENDING","GET_MEALS_SUCCESS","POST_MEAL_FAIL","POST_MEAL_PENDING","POST_MEAL_SUCCESS","mealListInitialState","MealContext","mealReducer","MealProvider","children","state","dispatch","getMealList","type","response","fetch","ok","Error","data","json","formatedMealList","key","push","payload","error","postMealItem","meals","method","body","JSON","stringify","headers","mealContext","mealList","isLoading","mealItem","isPostLoading","errorPost"],"sources":["/Users/sarah/Documents/Projects/Food/src/store/MealProvider.js"],"sourcesContent":["import { useReducer, useEffect, useMemo, useCallback } from \"react\";\nimport { BASE_URL } from \"../common/constant\";\nimport {\n  GET_MEALS_FAIL,\n  GET_MEALS_PENDING,\n  GET_MEALS_SUCCESS,\n  POST_MEAL_FAIL,\n  POST_MEAL_PENDING,\n  POST_MEAL_SUCCESS,\n} from \"./actions\";\nimport { mealListInitialState } from \"./initialState\";\nimport MealContext from \"./mealContext\";\nimport mealReducer from \"./mealReducer\";\n\nconst MealProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(mealReducer, mealListInitialState);\n\n  const getMealList = useCallback(async () => {\n    dispatch({\n      type: GET_MEALS_PENDING,\n    });\n    try {\n      const response = await fetch(BASE_URL);\n      if (!response.ok) {\n        throw Error(\"Somethig goes wrong !\");\n      }\n      const data = useMemo(async () => {\n        await response.json();\n      }, [response]);\n      let formatedMealList = [];\n      for (const key in data) {\n        formatedMealList.push(data[key]);\n      }\n      dispatch({\n        type: GET_MEALS_SUCCESS,\n        payload: formatedMealList,\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_MEALS_FAIL,\n        payload: error,\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    getMealList();\n  }, [getMealList]);\n\n  const postMealItem = async (meals) => {\n    dispatch({ type: POST_MEAL_PENDING });\n    try {\n      const response = await fetch(BASE_URL, {\n        method: \"POST\",\n        body: JSON.stringify(meals),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n\n      if (response.ok) {\n        dispatch({ type: POST_MEAL_SUCCESS });\n      } else {\n        throw Error(\"Add meal failed !\");\n      }\n      return response;\n    } catch (error) {\n      dispatch({ type: POST_MEAL_FAIL, payload: error });\n    }\n  };\n\n  const mealContext = {\n    mealList: state.mealList,\n    isLoading: state.isLoading,\n    error: state.error,\n    mealItem: state.mealItem,\n    isPostLoading: state.isPostLoading,\n    errorPost: state.errorPost,\n    getMealList: getMealList,\n    postMealItem: postMealItem,\n  };\n  return (\n    <MealContext.Provider value={mealContext}>{children}</MealContext.Provider>\n  );\n};\n\nexport default MealProvider;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}